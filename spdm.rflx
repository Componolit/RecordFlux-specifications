package SPDM is

   -- Security Protocol and Data Model (SPDM) Specification
   -- Document Identifier: DSP0274
   -- Version: 1.1.0

   -- We will define a static hash type Hash, even though this is acutally based on prior
   -- negotiation. We will use Hash'Size throughout this spec to simulate that.
   -- ISSUE: Componolit/systematization-binary-schemas#53
   type Hash is mod 2**64;
   type Signature is mod 2**64;

   type Hashes is array of Hash;

   -- ISSUE: Componolit/RecordFlux#601
   -- [33] Unless otherwise specified, reserved numeric and bit fields shall be written as
   --      zero (0) and ignored when read.

   type Reserved_3 is range 0 .. 0 with Size => 3;
   type Reserved_8 is range 0 .. 0 with Size => 8;

   -- ISSUE: Componolit/RecordFlux#104
   -- [35] Unless otherwise specified, for all SPDM specifications byte ordering of multi-byte
   --      numeric fields or multi-byte bit fields is "Little Endian" (that is, the lowest byte
   --      offset holds the least significant byte, and higher offsets hold the more significant
   --      bytes).

   -- 2.5.1 Version encoding

   type Major_Version is range 1 .. 1 with Size => 4;
   type Minor_Version is range 0 .. 0 with Size => 4;

   -- 8.3 SPDM request codes

   type Request_Code is
      (Get_Digests                   => 16#81#,
       Get_Certificate               => 16#82#,
       Challenge                     => 16#83#,
       Get_Version                   => 16#84#,
       Get_Measurements              => 16#E0#,
       Get_Capabilities              => 16#E1#,
       Negotiate_Algorithms          => 16#E3#,
       Key_Exchange                  => 16#E4#,
       Finish                        => 16#E5#,
       PSK_Exchange                  => 16#E6#,
       PSK_Finish                    => 16#E7#,
       Heartbeat                     => 16#E8#,
       Key_Update                    => 16#E9#,
       Get_Encapsulated_Request      => 16#EA#,
       Deliver_Encapsulated_Response => 16#EB#,
       End_Session                   => 16#EC#,
       Respond_If_Ready              => 16#FF#,
       Vendor_Defined_Request        => 16#FE#)
   with Size => 8;

   -- 8.4 SPDM response codes

   type Response_Code is
      (Digests                   => 16#01#,
       Certificate               => 16#02#,
       Challenge_Auth            => 16#03#,
       Version                   => 16#04#,
       Measurements              => 16#60#,
       Capabilities              => 16#61#,
       Algorithms                => 16#63#,
       Key_Exchange_RSP          => 16#64#,
       Finish_RSP                => 16#65#,
       PSK_Exchange_RSP          => 16#66#,
       PSK_Finish_RSP            => 16#67#,
       Heartbeat_ACK             => 16#68#,
       Key_Update_ACK            => 16#69#,
       Encapsulated_Request      => 16#6A#,
       Encapsulated_Response_ACK => 16#6B#,
       End_Session_ACK           => 16#6C#,
       Vendor_Defined_Response   => 16#7E#,
       Error                     => 16#7F#)
   with Size => 8;

   -- 8.2 Generic SPDM message format

   type Request is
      message
         Major_Version : Major_Version;
         Minor_Version : Minor_Version;
         Code : Request_Code;
         Data : Opaque
            with Size => Message'Size - (Code'Last - Major_Version'First + 1);
      end message;

   type Response is
      message
         Major_Version : Major_Version;
         Minor_Version : Minor_Version;
         Code : Response_Code;
         Data : Opaque
            with Size => Message'Size - (Code'Last - Major_Version'First + 1);
      end message;

   --  Common types

   type Slot_Present is range 0 .. 1 with Size => 1;

   type Slot_Mask is
      message
         Slot_7_Present : Slot_Present;
         Slot_6_Present : Slot_Present;
         Slot_5_Present : Slot_Present;
         Slot_4_Present : Slot_Present;
         Slot_3_Present : Slot_Present;
         Slot_2_Present : Slot_Present;
         Slot_1_Present : Slot_Present;
         Slot_0_Present : Slot_Present;
      end message;

   -- 10.7 GET_DIGESTS request and DIGESTS response messages

   type Get_Digests_Request is
      message
         Param_1 : Reserved_8;
         Param_2 : Reserved_8;
      end message;

   for Request use (Data => Get_Digests_Request)
      if Code = Get_Digests;

   type Digests_Response is
      message
         Param_1 : Reserved_8;
         Slot_Mask : Slot_Mask;
         Digests_Data : Hashes
            --  FIXME: Hash'Size should work, but doesn't
            with Size => 64 * (Slot_Mask_Slot_0_Present
                               + Slot_Mask_Slot_1_Present
                               + Slot_Mask_Slot_2_Present
                               + Slot_Mask_Slot_3_Present
                               + Slot_Mask_Slot_4_Present
                               + Slot_Mask_Slot_5_Present
                               + Slot_Mask_Slot_6_Present
                               + Slot_Mask_Slot_7_Present);
      end message;

   for Response use (Data => Digests_Response)
      if Code = Digests;

   -- 10.8 GET_CERTIFICATE request and CERTIFICATE response messages

   type Slot is
      (Slot_0              => 16#00#,
       Slot_1              => 16#01#,
       Slot_2              => 16#02#,
       Slot_3              => 16#03#,
       Slot_4              => 16#04#,
       Slot_5              => 16#05#,
       Slot_6              => 16#06#,
       Slot_7              => 16#07#,
       Trusted_Environment => 16#FF#)
   with Size => 8;

   type Offset is mod 2**16;
   type Length is mod 2**16;

   type Get_Certificate_Request is
      message
         Slot : Slot;
         Param_2 : Reserved_8;
         --  This property must be expressed in the session:
         --     For the first GET_CERTIFICATE request, the Requester shall set this field to 0.
         --     For non-first requests, Offset is the sum of PortionLength values in all previous
         --     GET_CERTIFICATE responses.
         Offset : Offset;
         Length : Length;
      end message;

   for Request use (Data => Get_Certificate_Request)
      if Code = Get_Certificate;

   type Certificate_Response is
      message
         Slot : Slot;
         Param_2 : Reserved_8;
         Portion_Length : Length;
         Remainder_Length : Length;
         Cert_Chain : Opaque
            with Size => 8 * Portion_Length;
      end message;

   for Response use (Data => Certificate_Response)
      if Code = Certificate;

   -- 10.9 CHALLENGE request and CHALLENGE_AUTH response messages

   type Measurement_Summary_Hash_Type is
      (No_Measurement   => 16#00#,
       TCB_Measurement  => 16#01#,
       All_Measurements => 16#FF#)
   with Size => 8;

   type Challenge_Request is
      message
         Slot : Slot;
         Hash_Type : Measurement_Summary_Hash_Type;
         Nonce : Opaque
            with Size => 8 * 32;
      end message;

   for Request use (Data => Challenge_Request)
      if Code = Challenge;

   type Narrow_Slot is
      (NS_0                   => 16#0#,
       NS_1                   => 16#1#,
       NS_2                   => 16#2#,
       NS_3                   => 16#3#,
       NS_4                   => 16#4#,
       NS_5                   => 16#5#,
       NS_6                   => 16#6#,
       NS_7                   => 16#7#,
       NS_Trusted_Environment => 16#F#)
   with Size => 4;

   type Challenge_Auth_Response is
      message
         Basic_Mut_Auth_Req : Boolean;
         Reserved           : Reserved_3;
         Slot               : Narrow_Slot;
         Slot_Mask          : Slot_Mask;
         Cert_Chain_Hash    : Hash;
         Nonce : Opaque
            with Size => 8 * 32;
         --  ISSUE: Componolit/systematization-binary-schemas#53
         --  This field shall
         --    - not be present if Hash_Type of the request was No_Measurement or measurement is
         --      unsupported
         --    - contain a hash if Hash_Type was TCB_Measurement
         --    - be 0 if Hash_Type was TCB_Measurement and no measurement is required
         --    - contain a hash of all measurements if Hash_Type was All_Measurments
         Opaque_Length : Length
            then Opaque_Data
               if Opaque_Length <= 1024;
         Opaque_Data : Opaque
            with Size => 8 * Opaque_Length;
         Signature : Signature;
      end message;

   for Response use (Data => Challenge_Auth_Response)
      if Code = Challenge_Auth;

end SPDM;
